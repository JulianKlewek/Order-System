version: '3.7'
services:

  #MySQL Order-Service
  mysql-order:
    container_name: mysql-order
    image: mysql
    environment:
      MYSQL_DATABASE: "order-service"
      MYSQL_USER: julekk
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      MYSQL_TCP_PORT: 5431
    volumes:
      - ./mysql_order:/var/lib/mysql
    expose:
      - "5431"
    ports:
      - "5431:5431"
    restart: unless-stopped

  #MySQL Inventory-Service
  mysql-inventory:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: "inventory-service"
      MYSQL_USER: julekk
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      MYSQL_TCP_PORT: 5432
    volumes:
      - ./mysql_inventory:/var/lib/mysql
    expose:
      - "5432"
    ports:
      - "5432:5432"
#    command: -publish 5432
    restart: unless-stopped

  #Mongo
  mongo:
    container_name: mongo
    image: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  #Keycloak
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'keycloak'
      MYSQL_USER: 'admin'
      MYSQL_PASSWORD: 'admin'
      MYSQL_ROOT_PASSWORD: 'admin'

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0.4
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  #Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  #Eureka Server
  discovery-server:
    build: discovery-server
    image: julekkl/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  #Api-Gateway
  api-gateway:
    build: api-gateway
    image: julekkl/apigateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - discovery-server
      - keycloak

  #Product-Service
  product-service:
    build: product-service
    container_name: product-service
    image: julekkl/product-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  #Order-Service
  order-service:
    build: order-service
    container_name: order-service
    image: julekkl/order-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:5431/order-service
    depends_on:
      - mysql-order
      - broker
      - discovery-server
      - api-gateway

  #Inventory-Service
  inventory-service:
    build: inventory-service
    container_name: inventory-service
    image: julekkl/inventory-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:5432/inventory-service
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway

  #Notification-Service
  notification-service:
    build: notification-service
    container_name: notification-service
    image: julekkl/notification-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql-inventory
      - broker
      - discovery-server
      - api-gateway